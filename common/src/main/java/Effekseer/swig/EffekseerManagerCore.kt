/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package Effekseer.swig

class EffekseerManagerCore protected constructor(
    @field:Transient private var swigCPtr: Long,
    @field:Transient protected var swigCMemOwn: Boolean
) {
    protected fun finalize() {
        delete()
    }

    @Synchronized
    fun delete() {
        if (swigCPtr != 0L) {
            if (swigCMemOwn) {
                swigCMemOwn = false
                EffekseerCoreJNI.delete_EffekseerManagerCore(swigCPtr)
            }
            swigCPtr = 0
        }
    }

    constructor() : this(EffekseerCoreJNI.new_EffekseerManagerCore(), true)

    fun Initialize(spriteMaxCount: Int, srgbMode: Boolean): Boolean {
        return EffekseerCoreJNI.EffekseerManagerCore_Initialize__SWIG_0(swigCPtr, this, spriteMaxCount, srgbMode)
    }

    fun Initialize(spriteMaxCount: Int): Boolean {
        return EffekseerCoreJNI.EffekseerManagerCore_Initialize__SWIG_1(swigCPtr, this, spriteMaxCount)
    }

    fun Update(deltaFrames: Float) {
        EffekseerCoreJNI.EffekseerManagerCore_Update(swigCPtr, this, deltaFrames)
    }

    fun BeginUpdate() {
        EffekseerCoreJNI.EffekseerManagerCore_BeginUpdate(swigCPtr, this)
    }

    fun EndUpdate() {
        EffekseerCoreJNI.EffekseerManagerCore_EndUpdate(swigCPtr, this)
    }

    fun UpdateHandleToMoveToFrame(handle: Int, v: Float) {
        EffekseerCoreJNI.EffekseerManagerCore_UpdateHandleToMoveToFrame(swigCPtr, this, handle, v)
    }

    fun Play(effect: EffekseerEffectCore?): Int {
        return EffekseerCoreJNI.EffekseerManagerCore_Play(
            swigCPtr,
            this,
            EffekseerEffectCore.Companion.getCPtr(effect),
            effect
        )
    }

    fun StopAllEffects() {
        EffekseerCoreJNI.EffekseerManagerCore_StopAllEffects(swigCPtr, this)
    }

    fun Stop(handle: Int) {
        EffekseerCoreJNI.EffekseerManagerCore_Stop(swigCPtr, this, handle)
    }

    fun SetPaused(handle: Int, v: Boolean) {
        EffekseerCoreJNI.EffekseerManagerCore_SetPaused(swigCPtr, this, handle, v)
    }

    fun SetShown(handle: Int, v: Boolean) {
        EffekseerCoreJNI.EffekseerManagerCore_SetShown(swigCPtr, this, handle, v)
    }

    fun SendTrigger(handle: Int, index: Int) {
        EffekseerCoreJNI.EffekseerManagerCore_SendTrigger(swigCPtr, this, handle, index)
    }

    fun SetEffectPosition(handle: Int, x: Float, y: Float, z: Float) {
        EffekseerCoreJNI.EffekseerManagerCore_SetEffectPosition(swigCPtr, this, handle, x, y, z)
    }

    fun SetEffectRotation(handle: Int, x: Float, y: Float, z: Float) {
        EffekseerCoreJNI.EffekseerManagerCore_SetEffectRotation(swigCPtr, this, handle, x, y, z)
    }

    fun SetEffectScale(handle: Int, x: Float, y: Float, z: Float) {
        EffekseerCoreJNI.EffekseerManagerCore_SetEffectScale(swigCPtr, this, handle, x, y, z)
    }

    fun SetLayerParameter(layer: Int, viewerPosX: Float, viewerPosY: Float, viewerPosZ: Float, distanceBias: Float) {
        EffekseerCoreJNI.EffekseerManagerCore_SetLayerParameter(
            swigCPtr,
            this,
            layer,
            viewerPosX,
            viewerPosY,
            viewerPosZ,
            distanceBias
        )
    }

    fun SetEffectTransformMatrix(
        handle: Int,
        v0: Float,
        v1: Float,
        v2: Float,
        v3: Float,
        v4: Float,
        v5: Float,
        v6: Float,
        v7: Float,
        v8: Float,
        v9: Float,
        v10: Float,
        v11: Float
    ) {
        EffekseerCoreJNI.EffekseerManagerCore_SetEffectTransformMatrix(
            swigCPtr,
            this,
            handle,
            v0,
            v1,
            v2,
            v3,
            v4,
            v5,
            v6,
            v7,
            v8,
            v9,
            v10,
            v11
        )
    }

    fun SetEffectTransformBaseMatrix(
        handle: Int,
        v0: Float,
        v1: Float,
        v2: Float,
        v3: Float,
        v4: Float,
        v5: Float,
        v6: Float,
        v7: Float,
        v8: Float,
        v9: Float,
        v10: Float,
        v11: Float
    ) {
        EffekseerCoreJNI.EffekseerManagerCore_SetEffectTransformBaseMatrix(
            swigCPtr,
            this,
            handle,
            v0,
            v1,
            v2,
            v3,
            v4,
            v5,
            v6,
            v7,
            v8,
            v9,
            v10,
            v11
        )
    }

    fun DrawBack(layer: Int) {
        EffekseerCoreJNI.EffekseerManagerCore_DrawBack__SWIG_0(swigCPtr, this, layer)
    }

    fun DrawBack() {
        EffekseerCoreJNI.EffekseerManagerCore_DrawBack__SWIG_1(swigCPtr, this)
    }

    fun DrawFront(layer: Int) {
        EffekseerCoreJNI.EffekseerManagerCore_DrawFront__SWIG_0(swigCPtr, this, layer)
    }

    fun DrawFront() {
        EffekseerCoreJNI.EffekseerManagerCore_DrawFront__SWIG_1(swigCPtr, this)
    }

    fun SetLayer(handle: Int, layer: Int) {
        EffekseerCoreJNI.EffekseerManagerCore_SetLayer(swigCPtr, this, handle, layer)
    }

    fun SetCameraParameter(frontX: Float, frontY: Float, frontZ: Float, posX: Float, posY: Float, posZ: Float) {
        EffekseerCoreJNI.EffekseerManagerCore_SetCameraParameter(
            swigCPtr,
            this,
            frontX,
            frontY,
            frontZ,
            posX,
            posY,
            posZ
        )
    }

    fun SetProjectionMatrix(
        v0: Float,
        v1: Float,
        v2: Float,
        v3: Float,
        v4: Float,
        v5: Float,
        v6: Float,
        v7: Float,
        v8: Float,
        v9: Float,
        v10: Float,
        v11: Float,
        v12: Float,
        v13: Float,
        v14: Float,
        v15: Float
    ) {
        EffekseerCoreJNI.EffekseerManagerCore_SetProjectionMatrix(
            swigCPtr,
            this,
            v0,
            v1,
            v2,
            v3,
            v4,
            v5,
            v6,
            v7,
            v8,
            v9,
            v10,
            v11,
            v12,
            v13,
            v14,
            v15
        )
    }

    fun SetCameraMatrix(
        v0: Float,
        v1: Float,
        v2: Float,
        v3: Float,
        v4: Float,
        v5: Float,
        v6: Float,
        v7: Float,
        v8: Float,
        v9: Float,
        v10: Float,
        v11: Float,
        v12: Float,
        v13: Float,
        v14: Float,
        v15: Float
    ) {
        EffekseerCoreJNI.EffekseerManagerCore_SetCameraMatrix(
            swigCPtr,
            this,
            v0,
            v1,
            v2,
            v3,
            v4,
            v5,
            v6,
            v7,
            v8,
            v9,
            v10,
            v11,
            v12,
            v13,
            v14,
            v15
        )
    }

    fun Exists(handle: Int): Boolean {
        return EffekseerCoreJNI.EffekseerManagerCore_Exists(swigCPtr, this, handle)
    }

    fun SetViewProjectionMatrixWithSimpleWindow(windowWidth: Int, windowHeight: Int) {
        EffekseerCoreJNI.EffekseerManagerCore_SetViewProjectionMatrixWithSimpleWindow(
            swigCPtr,
            this,
            windowWidth,
            windowHeight
        )
    }

    fun SetDynamicInput(handle: Int, index: Int, value: Float) {
        EffekseerCoreJNI.EffekseerManagerCore_SetDynamicInput(swigCPtr, this, handle, index, value)
    }

    fun GetDynamicInput(handle: Int, index: Int): Float {
        return EffekseerCoreJNI.EffekseerManagerCore_GetDynamicInput(swigCPtr, this, handle, index)
    }

    fun LaunchWorkerThreads(n: Int) {
        EffekseerCoreJNI.EffekseerManagerCore_LaunchWorkerThreads(swigCPtr, this, n)
    }

    fun SetBackground(glid: Long, hasMipmap: Boolean) {
        EffekseerCoreJNI.EffekseerManagerCore_SetBackground(swigCPtr, this, glid, hasMipmap)
    }

    fun UnsetBackground() {
        EffekseerCoreJNI.EffekseerManagerCore_UnsetBackground(swigCPtr, this)
    }

    fun SetDepth(glid: Long, hasMipmap: Boolean) {
        EffekseerCoreJNI.EffekseerManagerCore_SetDepth(swigCPtr, this, glid, hasMipmap)
    }

    fun UnsetDepth() {
        EffekseerCoreJNI.EffekseerManagerCore_UnsetDepth(swigCPtr, this)
    }

    fun GetInstanceCount(handle: Int): Int {
        return EffekseerCoreJNI.EffekseerManagerCore_GetInstanceCount(swigCPtr, this, handle)
    }

    fun GetTotalInstanceCount(): Int {
        return EffekseerCoreJNI.EffekseerManagerCore_GetTotalInstanceCount(swigCPtr, this)
    }

    companion object {
        @JvmStatic
        protected fun getCPtr(obj: EffekseerManagerCore?): Long {
            return if ((obj == null)) 0 else obj.swigCPtr
        }

        @JvmStatic
        protected fun swigRelease(obj: EffekseerManagerCore?): Long {
            var ptr: Long = 0
            if (obj != null) {
                if (!obj.swigCMemOwn) throw RuntimeException("Cannot release ownership as memory is not owned")
                ptr = obj.swigCPtr
                obj.swigCMemOwn = false
                obj.delete()
            }
            return ptr
        }
    }
}
