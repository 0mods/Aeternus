/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package Effekseer.swig

class EffekseerEffectCore protected constructor(
    @field:Transient private var swigCPtr: Long,
    @field:Transient protected var swigCMemOwn: Boolean
) {
    protected fun finalize() {
        delete()
    }

    @Synchronized
    fun delete() {
        if (swigCPtr != 0L) {
            if (swigCMemOwn) {
                swigCMemOwn = false
                EffekseerCoreJNI.delete_EffekseerEffectCore(swigCPtr)
            }
            swigCPtr = 0
        }
    }

    constructor() : this(EffekseerCoreJNI.new_EffekseerEffectCore(), true)

    fun Load(data: ByteArray?, len: Int, magnification: Float): Boolean {
        return EffekseerCoreJNI.EffekseerEffectCore_Load(swigCPtr, this, data, len, magnification)
    }

    fun GetTexturePath(index: Int, type: EffekseerTextureType): String? {
        return EffekseerCoreJNI.EffekseerEffectCore_GetTexturePath(swigCPtr, this, index, type.swigValue())
    }

    fun GetTextureCount(type: EffekseerTextureType): Int {
        return EffekseerCoreJNI.EffekseerEffectCore_GetTextureCount(swigCPtr, this, type.swigValue())
    }

    fun LoadTexture(data: ByteArray?, len: Int, index: Int, type: EffekseerTextureType): Boolean {
        return EffekseerCoreJNI.EffekseerEffectCore_LoadTexture(swigCPtr, this, data, len, index, type.swigValue())
    }

    fun HasTextureLoaded(index: Int, type: EffekseerTextureType): Boolean {
        return EffekseerCoreJNI.EffekseerEffectCore_HasTextureLoaded(swigCPtr, this, index, type.swigValue())
    }

    fun GetModelPath(index: Int): String? {
        return EffekseerCoreJNI.EffekseerEffectCore_GetModelPath(swigCPtr, this, index)
    }

    fun GetModelCount(): Int {
        return EffekseerCoreJNI.EffekseerEffectCore_GetModelCount(swigCPtr, this)
    }

    fun LoadModel(data: ByteArray?, len: Int, index: Int): Boolean {
        return EffekseerCoreJNI.EffekseerEffectCore_LoadModel(swigCPtr, this, data, len, index)
    }

    fun HasModelLoaded(index: Int): Boolean {
        return EffekseerCoreJNI.EffekseerEffectCore_HasModelLoaded(swigCPtr, this, index)
    }

    fun GetMaterialPath(index: Int): String? {
        return EffekseerCoreJNI.EffekseerEffectCore_GetMaterialPath(swigCPtr, this, index)
    }

    fun GetMaterialCount(): Int {
        return EffekseerCoreJNI.EffekseerEffectCore_GetMaterialCount(swigCPtr, this)
    }

    fun LoadMaterial(data: ByteArray?, len: Int, index: Int): Boolean {
        return EffekseerCoreJNI.EffekseerEffectCore_LoadMaterial(swigCPtr, this, data, len, index)
    }

    fun GetCurvePath(index: Int): String? {
        return EffekseerCoreJNI.EffekseerEffectCore_GetCurvePath(swigCPtr, this, index)
    }

    fun HasMaterialLoaded(index: Int): Boolean {
        return EffekseerCoreJNI.EffekseerEffectCore_HasMaterialLoaded(swigCPtr, this, index)
    }

    fun GetCurveCount(): Int {
        return EffekseerCoreJNI.EffekseerEffectCore_GetCurveCount(swigCPtr, this)
    }

    fun LoadCurve(data: ByteArray?, len: Int, index: Int): Boolean {
        return EffekseerCoreJNI.EffekseerEffectCore_LoadCurve(swigCPtr, this, data, len, index)
    }

    fun HasCurveLoaded(index: Int): Boolean {
        return EffekseerCoreJNI.EffekseerEffectCore_HasCurveLoaded(swigCPtr, this, index)
    }

    fun GetTermMax(): Int {
        return EffekseerCoreJNI.EffekseerEffectCore_GetTermMax(swigCPtr, this)
    }

    fun GetTermMin(): Int {
        return EffekseerCoreJNI.EffekseerEffectCore_GetTermMin(swigCPtr, this)
    }

    companion object {
        fun getCPtr(obj: EffekseerEffectCore?): Long {
            return if ((obj == null)) 0 else obj.swigCPtr
        }

        protected fun swigRelease(obj: EffekseerEffectCore?): Long {
            var ptr: Long = 0
            if (obj != null) {
                if (!obj.swigCMemOwn) throw RuntimeException("Cannot release ownership as memory is not owned")
                ptr = obj.swigCPtr
                obj.swigCMemOwn = false
                obj.delete()
            }
            return ptr
        }
    }
}
