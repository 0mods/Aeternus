
plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id "maven-publish"
    id 'net.minecraftforge.gradle' version '5.1.+'
}

group = 'com.algorithmlx'
version = '1.0-SNAPSHOT'

sourceSets {
    api {
        resources.srcDirs = []
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

java {
    archivesBaseName = 'AncientMagic'
    toolchain.languageVersion = JavaLanguageVersion.of(20)
}

minecraft {
    mappings channel: 'official', version: '1.19.4'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'AncientMagic'
            
            mods {
                ancientmagic {
                    sources((SourceSet[]) [sourceSets.main, sourceSets.api])
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

                        property 'forge.enabledGameTestNamespaces', 'AncientMagic'
            
            mods {
                ancientmagic {
                    sources((SourceSet[]) [sourceSets.main, sourceSets.api])
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'AncientMagic'

            mods {
                ancientmagic {
                    sources((SourceSet[]) [sourceSets.main, sourceSets.api])
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'ancientmagic', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                ancientmagic {
                    sources((SourceSet[]) [sourceSets.main, sourceSets.api])
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.4-45.0.46'

    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}")

    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output
    manifest {
        attributes([
                "Specification-Title":      "ancientmagic",
                "Specification-Vendor":     "AlgorithmLX",
                "Specification-Version":    "1",
                "Implementation-Title":     project.name,
                "Implementation-Version":   project.jar.archiveVersion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('api')
    from sourceSets.api.output
    afterEvaluate { finalizedBy reobfApiJar }

    from sourceSets.api.allJava
}

task deobfJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('deobf')
    from sourceSets.main.output
    from sourceSets.api.output
}

artifacts {
    archives sourcesJar
    archives apiJar
    archives deobfJar
}

reobf {
    apiJar { classpath.from(sourceSets.api.compileClasspath) }
    jar { classpath.from(sourceSets.main.compileClasspath) }
}

task reobf {
    dependsOn reobfJar
    dependsOn reobfApiJar
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
